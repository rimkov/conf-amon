#!/usr/bin/env python
# -*- coding: UTF-8 -*-

from creole.cfgparser import EoleDict
from creole.config import eoledirs
import os

d = EoleDict()
d.read_dir(eoledirs)
d.load_values('/etc/eole/config.eol')

# gestion de l'activation du sso sur eole 2.1 : nouvelle variable 'sso' à positionner à 'oui'
if os.path.isfile('/etc/eole/dicos/2_sso.xml'):
    ip_eth0 = d.get_final_value('adresse_ip_eth0')
    ip_sso = d.get_final_value('adresse_ip_sso')
    # localhost et 127.0.0.1 interdits pour l'adresse sso
    if ip_sso in ["127.0.0.1","localhost"]:
        try:
            d.set_value('adresse_ip_sso', ip_eth0)
            d.save_values('/etc/eole/config.eol')
            print ("\n l'adresse du serveur sso doit être différente de %s, valeur forcée à %s\nVous pouvez la modifier via gen_config\n" % (ip_sso, ip_eth0))
        except:
            print ("\n! Erreur lors de la modification de la variable adresse_ip_sso !\n lancez gen_config pour vérifier sa valeur\n")
    if ip_eth0 == ip_sso:
        try:
            d.set_value('sso','oui')
            d.save_values('/etc/eole/config.eol')
        except:
            print ("\n! erreur lors de l'activation du service sso, vérifiez l'onglet 'services' dans gen_config !\n")
        else:
            print ("\nPour information: Le service eole-sso a été activé. Vous pouvez le configurer via gen_config.\n")

# désactivation Apache2/Ead1
if os.path.isfile('/etc/apache2/sites-enabled/apache-ead.conf'):
    os.remove('/etc/apache2/sites-enabled/apache-ead.conf')

# purge de la crontab de root
os.system('/usr/bin/crontab -u root -r 2>/dev/null')

# Gestion des zones de configuration
if os.path.isfile('/etc/eole/dicos/0_amon.xml'):
    print "====> Migration des configurations utilisateurs (pare-feu, filtrage de sites web et groupe de machine."
    try:
        print "++++ Mise en place automatique de données de configuration."
        squid_auth = d.get_final_value('activer_squid_auth')
        if squid_auth == 'oui':
            try:
                d.set_value('dansguardian_eth2', '2')
                d.save_values('/etc/eole/config.eol')
                print "++++ L'interface eth2 est désormais gérée par la politique de filtrage 2"
            except:
                print ("---- Erreur lors de la mise en place des politiques de filtrage sur l'interface eth2")

        # initialisation de la configuration dansguardian
        from amon.backend import get_zones
        from amon.dansguardian import init_dans
        ifaces = get_zones()[0]
        init_dans.create_dansguardian_conf_files(ifaces)

        # Récupération des configurations (dansguardian, era, ipset)
        from amon.dansguardian.migration import migration_dansguardian
        from amon.era.migration import migration_era
        from amon.ipset.migration import migration_ipset
        migration_dansguardian(squid_auth)
        migration_era(squid_auth)
        migration_ipset(squid_auth)
    except:
        import traceback
        traceback.print_exc()
        print "----> Erreur à la migration des données."

# Creation d'un utilisateur amon2 pour la configuration de la zone 2
res = os.system('id amon2 &>/dev/null')
if res != 0:
    print
    print "############################################################"
    print "#     Création d'un deuxième compte local ead2 (amon2)     #"
    print "############################################################"
    os.system("useradd 'amon2'")
    res = 1
    while res != 0:
        res = os.system('passwd amon2')

# standardisation du compte amon
os.system("sed -i '/manage-amon.sh/d' /home/amon/.profile")
os.system("usermod -s /usr/share/eole/manage-amon.sh amon")

