#!/usr/bin/env python
# -*- coding: utf8 -*-
"""
utilitaire active_rvp sur l'Amon
"""
import sys
import xmlrpclib

from getpass import getpass
from os import system, sep, unlink, mkdir
from os.path import isfile, isdir, dirname
from commands import getoutput
from shutil import copy

from pyeole.ihm import question_ouinon
from pyeole.ansiprint import print_orange, print_red
from creole.parsedico import parse_dico
from creole.cert import get_subject
from zephir.lib_zephir import TransportEole
try:
    from zephir.zephir_conf.zephir_conf import id_serveur, adresse_zephir
    ZEPHIR = True
except:
    ZEPHIR = False
from arv.config import strongswan_database, ipsec_tmp_path
from arv.lib.util import decrypt_privkey, password_OK
from arv.lib import cmd2 as cmd
from arv.db.strongswandb import (PeerConfigs, PrivateKey, PrivateKeyIdentity,
                                 SharedSecrets, SharedSecretIdentity, Identity,
                                 CertificateIdentity, Certificates, initialise)

def get_password():
    if isfile(ipsec_tmp_path+sep+"ipsec.db"):
        password = getpass("")
    else:
        print_red("archive inexistante")
        sys.exit()
    return password


#______________________________________________________________________________
# command line interpreter
class Cli(cmd.Cmd):
    "command line interpreter (abstract base class)"
    def __init__(self):
        cmd.Cmd.__init__(self)
        self.doc_header = "Commandes documentées"
        self.undoc_header = "Commandes non documentées"
        self.ruler = '-'
        self.prompt = "#ActiveRVP> "
        self.intro  = """Console ActiveRVP :
  tapez help (ou "?") pour avoir la liste des commandes,
  tapez help <command> pour avoir une aide sur chaque commande"""

    def emptyline(self):
        print "Type 'exit' to finish with the session or type ? for help."

#    def postcmd(self, stop, line):
#        stop = True

    def default(self, line):
        print "unknown command prefix"
        print "*** unknown syntax : %s (type 'help' for help for a list of valid commands)"%line
        self.emptyline()

    def do_exit(self, line):
        """Exits from the console"""
        return True

    def do_quit(self, line):
        return True

    def do_EOF(self, args):
        """Exit on system end of file character"""
        return True #self.do_exit(args)

#    def postloop(self):
#        # put here your post actions
#        print "exit cli"


#_____________________________________________________________________________
# active_rvp command line interpreter
class ActiveRVPCli(Cli):
    """Active RVP Command line interpreter
    """

    def do_init(self, line):
        """Mode d'activation rvp
        """
        conf_eole = parse_dico()
        if conf_eole['install_rvp'] == 'oui':
            if ZEPHIR:
                mode = self.select("manuel zephir quitter", "choisissez le mode : ")
                if mode == "zephir":
                   self.onecmd("zephir")
                elif mode == "manuel":
                    self.onecmd("manuel")
                else:
                    self.onecmd("exit")
            else:
                print_orange("Le serveur n'est pas enregistré sur un Zéphir")
                rep = question_ouinon("configurer en mode manuel", default='non')
                if rep == 'oui':
                    self.onecmd("manuel")
                else:
                    print "Abandon de la configuration RVP"
            return True
        else:
            print_orange("Le RVP n'est pas activé dans la configuration du serveur.")
            return True

    def do_manuel(self, line):
        """mode manuel"""
        # FIXME
        print_red("copier les fichiers ipsec.db et test-rvp dans " + ipsec_tmp_path)
        self.onecmd("start_ipsec")
        return True

    def do_zephir(self, line):
        """activation du rvp par zephir
        """
        if not ZEPHIR:
            print_red("serveur non enregistré sur Zéphir")
            return True
        if self.onecmd("get_rvp_from_zephir"):
            self.onecmd("start_ipsec")
        return True

    def do_delete(self, line):
        """Désactivation rvp
        """
        rep = question_ouinon("Etes-vous certain de vouloir désactiver le VPN ?", default='non')
        if rep == 'oui':
            system("/etc/init.d/rvp stop")
            unlink(strongswan_database)
            unlink("/usr/share/eole/test-rvp")
        else:
            print "Abandon de la suppression du RVP"
        return True

    def do_get_rvp_from_zephir(self, line):
        """récupération de l'archive rvp sur le Zephir"""
        #login, passwd, id_sphynx, tmp_ipsec_path
        login = raw_input("Entrez le login Zephir : ")
        passwd = getpass("Entrez le mot de passe Zephir : ")
        id_sphynx = raw_input("Entrez l'identifiant Zephir du serveur sphynx : ")
        if not isdir(dirname(ipsec_tmp_path)):
            mkdir(dirname(ipsec_tmp_path))
        if not isdir(ipsec_tmp_path):
            mkdir(ipsec_tmp_path)
        zephir_proxy = xmlrpclib.ServerProxy("https://%s:%s@%s:7080" % (login, passwd, adresse_zephir), transport=TransportEole())
        try:
            # récupération de l'archive de configuration vpn
            ret, contenu_b64 = zephir_proxy.uucp.sphynx_get(id_sphynx, id_serveur)
        except xmlrpclib.ProtocolError:
            print "Erreur d'authentification zephir !"
            return False
        if ret:
            contenu = xmlrpclib.base64.decodestring(contenu_b64)
            # écriture du fichier tar
            archive = ipsec_tmp_path+sep+'vpn_%star.gz' % id_sphynx
            f=open(archive,"w")
            f.write(contenu)
            f.close()
            # décompression de l'archive
            system("cd %s;/bin/tar xzf %s" % (ipsec_tmp_path,archive))
            unlink(archive)
            print "#->archive récupérée"
            return True
        else:
            print "Erreur :", contenu_b64
            return False

    def do_start_ipsec(self, line):
        """Déplombe les clefs privées"""
        try:
            session = initialise("sqlite:///"+ipsec_tmp_path+sep+"ipsec.db")
            for privkey, ident in session.query(PrivateKey, Identity).\
                                    filter(PrivateKey.id == PrivateKeyIdentity.private_key).\
                                    filter(PeerConfigs.local_id==PrivateKeyIdentity.identity).\
                                    filter(PeerConfigs.local_id == Identity.id).\
                                    filter(Identity.type==9).all():
                certif, certident = session.query(Certificates.data,
                                    CertificateIdentity.certificate).\
                                    filter(Certificates.id == CertificateIdentity.certificate).\
                                    filter(CertificateIdentity.identity == ident.id).first()
                #certname = getoutput("""echo "{0}" | openssl x509 -text -noout|grep CN|grep Subject|grep -o "[^=]*$" """.format(certif))
                certname = unicode(get_subject(cert=certif)[1], 'utf-8')
                print
                print "Passphrase du certificat {0} : ".format(certname),
                tmpkey = '/tmp/pk.pem'
                privatekey_file = open(tmpkey, "w")
                privatekey_file.write(privkey.data)
                privatekey_file.close()
                passwd = get_password()
                tried = 1
                while not password_OK(tmpkey, passwd) and tried < 3:
                    print "erreur passphrase, veuillez réessayer : ",
                    passwd = get_password()
                    tried +=1
                if tried == 3 and not password_OK(tmpkey, passwd):
                    print "Passphrase erronée, trop de tentatives !!!"
                    unlink(tmpkey)
                    exit(1)
                unlink(tmpkey)
                decrypted_privkey = decrypt_privkey(privkey.data, passwd)
                privkey.data = decrypted_privkey
                session.commit()
            session.flush()
            copy(ipsec_tmp_path+sep+"ipsec.db", strongswan_database)
            copy(ipsec_tmp_path+sep+"test-rvp", "/usr/share/eole/test-rvp")
            system("/usr/share/eole/gen_ip_xfrm_policy")
            system("/etc/init.d/rvp restart")
            return True
        except:
            print_red("RVP non configuré !!!")
            self.onecmd("exit")
#_____________________________________________________________________________
# launch interpreter
cmd = ActiveRVPCli()
cmd.cmdloop()

